# This file has been autogenerated by invoking:
# $ ./generate_workflow.py < generator.yml mainline > .github/workflows/mainline.yml
# Do not modify manually.
name: Clang Linux CI v2 mainline
jobs:
  kick_tuxbuild:
    name: TuxBuild
    runs-on: ubuntu-20.04
    container: tuxbuild/tuxbuild
    env:
      TUXBUILD_TOKEN: ${{ secrets.TUXBUILD_TOKEN }}
    steps:
    - uses: actions/checkout@v2
    - name: tuxbuild
      run: 'tuxbuild build-set --git-repo "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git" --git-ref master --set-name clang-nightly --json-out builds.json --tux-config tuxbuild.yml || true

        '
    - name: save output
      uses: actions/upload-artifact@v2
      with:
        path: builds.json
        name: output_artifact
  ARCH=arm LLVM=1 LLVM_IAS=1 BOOT=1:
    runs-on: ubuntu-20.04
    needs: kick_tuxbuild
    name: ARCH=arm LLVM=1 LLVM_IAS=1 BOOT=1
    env:
      ARCH: arm
      LLVM: true
      LLVM_IAS: true
      INSTALL_DEPS: 1
      BOOT: true
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/download-artifact@v2
      with:
        name: output_artifact.py
    - name: Boot Test
      run: ./check_logs.py
  ARCH=arm64 LLVM=1 LLVM_IAS=1 BOOT=1:
    runs-on: ubuntu-20.04
    needs: kick_tuxbuild
    name: ARCH=arm64 LLVM=1 LLVM_IAS=1 BOOT=1
    env:
      ARCH: arm64
      LLVM: true
      LLVM_IAS: true
      INSTALL_DEPS: 1
      BOOT: true
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/download-artifact@v2
      with:
        name: output_artifact.py
    - name: Boot Test
      run: ./check_logs.py
  ARCH=mips LLVM=0 LLVM_IAS=0 BOOT=1:
    runs-on: ubuntu-20.04
    needs: kick_tuxbuild
    name: ARCH=mips LLVM=0 LLVM_IAS=0 BOOT=1
    env:
      ARCH: mips
      LLVM: false
      LLVM_IAS: false
      INSTALL_DEPS: 1
      BOOT: true
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/download-artifact@v2
      with:
        name: output_artifact.py
    - name: Boot Test
      run: ./check_logs.py
  ARCH=powerpc LLVM=0 LLVM_IAS=0 BOOT=1:
    runs-on: ubuntu-20.04
    needs: kick_tuxbuild
    name: ARCH=powerpc LLVM=0 LLVM_IAS=0 BOOT=1
    env:
      ARCH: powerpc
      LLVM: false
      LLVM_IAS: false
      INSTALL_DEPS: 1
      BOOT: true
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/download-artifact@v2
      with:
        name: output_artifact.py
    - name: Boot Test
      run: ./check_logs.py
  ARCH=riscv LLVM=1 LLVM_IAS=1 BOOT=0:
    runs-on: ubuntu-20.04
    needs: kick_tuxbuild
    name: ARCH=riscv LLVM=1 LLVM_IAS=1 BOOT=0
    env:
      ARCH: riscv
      LLVM: true
      LLVM_IAS: true
      INSTALL_DEPS: 1
      BOOT: false
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/download-artifact@v2
      with:
        name: output_artifact.py
    - name: Boot Test
      run: ./check_logs.py
  ARCH=s390 LLVM=0 LLVM_IAS=0 BOOT=0:
    runs-on: ubuntu-20.04
    needs: kick_tuxbuild
    name: ARCH=s390 LLVM=0 LLVM_IAS=0 BOOT=0
    env:
      ARCH: s390
      LLVM: false
      LLVM_IAS: false
      INSTALL_DEPS: 1
      BOOT: false
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/download-artifact@v2
      with:
        name: output_artifact.py
    - name: Boot Test
      run: ./check_logs.py
  ARCH=x86_64 LLVM=1 LLVM_IAS=1 BOOT=1:
    runs-on: ubuntu-20.04
    needs: kick_tuxbuild
    name: ARCH=x86_64 LLVM=1 LLVM_IAS=1 BOOT=1
    env:
      ARCH: x86_64
      LLVM: true
      LLVM_IAS: true
      INSTALL_DEPS: 1
      BOOT: true
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/download-artifact@v2
      with:
        name: output_artifact.py
    - name: Boot Test
      run: ./check_logs.py
'on':
  workflow_dispatch: null

